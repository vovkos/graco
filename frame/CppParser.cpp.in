%{
--------------------------------------------------------------------------------
--
--  This file is part of the Graco toolkit.
--
--  Graco is distributed under the MIT license.
--  For details see accompanying license.txt file,
--  the public copy of which is also available at:
--  http://tibbo.com/downloads/archive/graco/license.txt
--
--------------------------------------------------------------------------------

dofile(FrameDir .. "/CppParserUtils.lua")
}
$CppFileBegin

#pragma warning(disable: 4065) // warning C4065: switch statement contains 'default' but no 'case' labels

//..............................................................................

// parse tables

const size_t*
$ParserClassName::getParseTable() {
	static const size_t parseTable[] = {
%{
for i = 1, SymbolCount do
	local row = ParseTable[i]
	emit("\t\t")
	for j = 1, TokenCount do
		emit(row[j], ", ")
	end

	trimOutput()
	-- emit("\n") also works, but it can cause inconsistent-new-lines warnings on windows
}

%{
end -- for
}
		-1
	};

	return parseTable;
}

const size_t*
$ParserClassName::getSequence(size_t index) {
	ASSERT(index < SequenceCount);

	static const size_t sequenceTable[] = {
%{
for i = 1, SequenceCount do
	local sequence = SequenceTable[i].sequence
	emit(string.format("\t\t/* %2d */  ", i - 1))
	for j = #sequence, 1, -1 do
		emit(sequence[j], ", ")
	end
}-1,
%{
end -- for
}
		-1
	};

	static const size_t sequenceIndexTable[] = {
%{
local j = 0;
for i = 1, SequenceCount do
	local sequence = SequenceTable[i].sequence
}
		$j,
%{
	j = j + #sequence + 1 -- including the terminating -1
end -- for
}
		-1
	};

	return sequenceTable + sequenceIndexTable[index];
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// tokens

$(ParserClassName)::TokenMap::TokenMap() {
	add(0, $(ParserClassName)::EofToken);
%{
for i = 3, TokenCount do
	local token = TokenTable[i]
}
	add($(getTokenString(token)), $(i - 1));
%{
end -- for
}
}

size_t
$ParserClassName::getTokenIndex(int token) {
	return axl::sl::getSingleton<TokenMap>()->findValue(token, AnyToken);
}

int
$ParserClassName::getTokenFromIndex(size_t index) {
	ASSERT(index < TokenCount);

	static const int tokenTable[] = {
		0,  // eof
		0,  // any token
%{
for i = 3, TokenCount do
	local token = TokenTable[i]
}
		$(getTokenString(token)),
%{
end -- for
}
		0
	};

	return tokenTable[index];
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// symbols

const char*
$ParserClassName::getSymbolName(size_t index) {
	ASSERT(index < SymbolCount);

	static const char* symbolNameTable[NamedSymbolCount + 1] = {
%{
for i = 1, NamedSymbolCount do
	local symbol = SymbolTable[i]
}
		"$(symbol.name)",
%{
end -- for
}
		NULL
	};

	return
		index < NamedSymbolCount ? symbolNameTable[index] :
		index < NamedSymbolCount + CatchSymbolCount ? "<catch>" :
		"<tmp>";
}

$ParserClassName::SymbolNode*
$ParserClassName::createSymbolNode(size_t index) {
	ASSERT(index < NamedSymbolCount);

	typedef
	SymbolNode*
	($ParserClassName::*CreateFunc)(size_t index);

	static CreateFunc const createFuncTable[NamedSymbolCount + 1] = {
%{
for i = 1, NamedSymbolCount do
	local symbol = SymbolTable[i]
	if symbol.isCustomClass or symbol.enterBlock or symbol.leaveBlock then
}
		&$ParserClassName::createSymbolNode_$(symbol.name),
%{
	else
}
		&$ParserClassName::createStdSymbolNode,
%{
	end --if
end -- for
}
		NULL
	};

	return (this->*createFuncTable[index])(index);
}

%{
for i = 1, NamedSymbolCount do
	local symbol = SymbolTable[i]
	if symbol.isCustomClass or symbol.enterBlock or symbol.leaveBlock then
}
$ParserClassName::SymbolNode*
$ParserClassName::createSymbolNode_$(symbol.name)(size_t index) {
%{
		if symbol.isCustomClass then
}
	return m_nodeAllocator->allocate<SymbolNode_$(symbol.name)>();
%{
		else
}
	SymbolNode* node = m_nodeAllocator->allocate<SymbolNode>();
	node->m_index = index;
%{
			if symbol.enterBlock then
}
	node->m_enterIndex = $(symbol.enterIndex);
%{
			end -- if

			if symbol.leaveBlock then
}
	node->m_leaveIndex = $(symbol.leaveIndex);
%{
			end -- if
}
	return node;
%{
		end -- if
}
}

%{
	end -- if
end -- for
}
$ParserClassName::SymbolNode*
$ParserClassName::createStdSymbolNode(size_t index) {
	SymbolNode* node = m_nodeAllocator->allocate<SymbolNode>();
	node->m_index = index;
	return node;
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// beacons

const size_t*
$ParserClassName::getBeacon(size_t index) {
	ASSERT(index < BeaconCount);

	static const size_t beaconTable[BeaconCount + 1][2] = {
%{
for i = 1, BeaconCount do
	local beacon = BeaconTable[i]
}
		{ $(beacon.slot), $(beacon.target) },
%{
end -- for
}
		{ 0 }
	};

	return beaconTable[index];
}

// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// actions

bool
$ParserClassName::action(size_t index) {
	ASSERT(index < ActionCount);

	typedef
	bool
	($ParserClassName::*ActionFunc)();

	static const ActionFunc actionFuncTable[ActionCount + 1]  = {
%{
for i = 1, ActionCount do
}
		&$ParserClassName::action_$(i - 1),
%{
end -- for
}
		NULL
	};

	return (this->*(actionFuncTable[index]))();
}

%{
for i = 1, ActionCount do
	local action = ActionTable[i]
	local productionSymbol = action.productionSymbol;
}
bool
$ParserClassName::action_$(i - 1)() {
	$(getSymbolDeclaration(productionSymbol, SymbolVariableName, "getSymbolTop()"))
$(getPpLine(action.srcPos.filePath, action.srcPos.line))
$(processActionUserCode(action.userCode, action.dispatcher, SymbolVariableName));
$(getPpLineDefault())
	return true;
}

%{
end  -- for
}
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// arguments

void
$ParserClassName::argument(
	size_t index,
	SymbolNode* symbol
) {
	ASSERT(index < ArgumentCount);

	typedef
	void
	($ParserClassName::*ArgumentFunc)(SymbolNode* symbol);

	static const ArgumentFunc argumentFuncTable[ArgumentCount + 1]  = {
%{
for i = 1, ArgumentCount do
}
		&$ParserClassName::argument_$(i - 1),
%{
end -- for
}
		NULL
	};

	(this->*(argumentFuncTable[index]))(symbol);
}

%{
for i = 1, ArgumentCount do
	local argument = ArgumentTable[i]
	local targetSymbol = argument.targetSymbol
	local productionSymbol = argument.productionSymbol
	local valueTable = argument.valueTable
}
void
$ParserClassName::argument_$(i - 1)(SymbolNode* symbol) {
	$(getSymbolDeclaration(targetSymbol, TargetVariableName, "symbol"))
	$(getSymbolDeclaration(productionSymbol, SymbolVariableName, "getSymbolTop()"))
%{
	for j = 1, #valueTable do
		local name = targetSymbol.paramNameTable[j]
		local value = processActionUserCode(valueTable[j], argument.dispatcher, SymbolVariableName)
}
$(getPpLine(argument.srcPos.filePath, argument.srcPos.line))
		$TargetVariableName->m_param.$name = $value;
$(getPpLineDefault())
%{
	end -- for
}
}

%{
end -- for
}
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// enter blocks

bool
$ParserClassName::enter(size_t index) {
	ASSERT(index < EnterCount);

	typedef
	bool
	($ParserClassName::*EnterFunc)();

	static const EnterFunc enterFuncTable[EnterCount + 1]  = {
%{
for i = 1, EnterCount do
	local symbol = EnterTable[i];
}
		&$ParserClassName::enter_$(symbol.name),
%{
end -- for
}
		NULL
	};

	return (this->*(enterFuncTable[index]))();
}

%{
for i = 1, EnterCount do
	local symbol = EnterTable[i]
}
bool
$ParserClassName::enter_$(symbol.name)() {
	$(getSymbolDeclaration(symbol, SymbolVariableName, "getSymbolTop()"))
$(getPpLine(symbol.srcPos.filePath, symbol.enterLine))
$(processActionUserCode(symbol.enterBlock, nil, SymbolVariableName));
$(getPpLineDefault())
	return true;
}

%{
end -- for
}
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// leave blocks

bool
$ParserClassName::leave(size_t index) {
	ASSERT(index < LeaveCount);

	typedef
	bool
	($ParserClassName::*LeaveFunc)();

	static const LeaveFunc leaveFuncTable[LeaveCount + 1]  = {
%{
for i = 1, LeaveCount do
	local symbol = LeaveTable[i];
}
		&$ParserClassName::leave_$(symbol.name),
%{
end -- for
}
		NULL
	};

	return (this->*(leaveFuncTable[index]))();
}

%{
for i = 1, LeaveCount do
	local symbol = LeaveTable[i]
}
bool
$ParserClassName::leave_$(symbol.name)() {
	$(getSymbolDeclaration(symbol, SymbolVariableName, "getSymbolTop()"))
$(getPpLine(symbol.srcPos.filePath, symbol.leaveLine))
$(processActionUserCode(symbol.leaveBlock, nil, SymbolVariableName));
$(getPpLineDefault())
	return true;
}

%{
end -- for
}
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// lookahead DFAs

$ParserClassName::LaDfaResult
$ParserClassName::laDfa(
	size_t index,
	int lookaheadToken,
	LaDfaTransition* transition
) {
	ASSERT(index < LaDfaCount);

	typedef
	LaDfaResult
	($ParserClassName::*LaDfaFunc)(
		int lookaheadToken,
		LaDfaTransition* transition
	);

	static const LaDfaFunc laDfaFuncTable[LaDfaCount + 1] = {
%{
for i = 1, LaDfaCount do
}
		&$ParserClassName::laDfa_$(i - 1),
%{
end -- for
}
		NULL
	};

	return (this->*(laDfaFuncTable[index]))(lookaheadToken, transition);
}

%{
for i = 1, LaDfaCount do
	local dfaNode = LaDfaTable[i]
}
$ParserClassName::LaDfaResult
$ParserClassName::laDfa_$(i - 1)(
	int lookaheadToken,
	LaDfaTransition* transition
) {
%{
	if dfaNode.resolver then
}
	transition->m_productionIndex = $(dfaNode.production);
	transition->m_resolverIndex = $(dfaNode.resolver);
	transition->m_resolverElseIndex = $(dfaNode.resolverElse);
%{
		if dfaNode.hasChainedResolver then
}
	transition->m_flags = llk::LaDfaNodeFlag_HasChainedResolver;
%{
		end -- if
}
	return LaDfaResult_Resolver;
%{
	else
}
	switch (lookaheadToken) {
%{
		local transitionTable = dfaNode.transitionTable
		for j = 1, #transitionTable do
			local transition = transitionTable[j]
			local tokenString = getTokenString(transition.token)
}
	case $tokenString:
%{
			if (transition.resolver) then
}
		transition->m_productionIndex = $(transition.production);
		transition->m_resolverIndex = $(transition.resolver);
		transition->m_resolverElseIndex = $(transition.resolverElse);
%{
				if transition.hasChainedResolver then
}
		transition->m_flags = llk::LaDfaNodeFlag_HasChainedResolver;
%{
				end -- if
}
		return LaDfaResult_Resolver;

%{
			else
}
		transition->m_productionIndex = $(transition.production);
		return LaDfaResult_Production;

%{
			end -- if
		end -- for
}
	default:
%{
		if (dfaNode.defaultProduction) then
}
		transition->m_productionIndex = $(dfaNode.defaultProduction);
		return LaDfaResult_Production;
	}
%{
		else
}
		return LaDfaResult_Fail;
	}
%{
		end	-- if
	end -- if
}
}

%{
end -- for
}
// . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

// synchornization tokens

const int*
$ParserClassName::getSyncTokenSet(size_t index) {
	ASSERT(index >= NamedSymbolCount && index < NamedSymbolCount + CatchSymbolCount);

	static const int syncTokenTable[] = {
%{
for i = NamedSymbolCount + 1, NamedSymbolCount + CatchSymbolCount do
	local tokenTable = SymbolTable[i].syncTokenTable
	emit(string.format("\t\t/* %2d */  ", i - NamedSymbolCount - 1))
	for j = 1, #tokenTable do
		local token = tokenTable[j]
		emit(getTokenString(token), ", ")
	end
}-1,
%{
end -- for
}
		-1
	};

	static const size_t syncTokenIndexTable[] = {
%{
local j = 0;
for i = NamedSymbolCount + 1, NamedSymbolCount + CatchSymbolCount do
	local tokenTable = SymbolTable[i].syncTokenTable
}
		$j,
%{
	j = j + #tokenTable + 1 -- including the terminating -1
end -- for
}
		-1
	};

	return syncTokenTable + syncTokenIndexTable[index - NamedSymbolCount];
}

//..............................................................................

$CppFileEnd
