//..............................................................................
//
//  This file is part of the Graco toolkit.
//
//  Graco is distributed under the MIT license.
//  For details see accompanying license.txt file,
//  the public copy of which is also available at:
//  http://tibbo.com/downloads/archive/graco/license.txt
//
//..............................................................................

lookahead(2);

primary_expression
	: IDENTIFIER
	| CONSTANT
	| STRING_LITERAL
	| '(' expression ')'
	;

postfix_expression
	: primary_expression postfix_operator*
	;

postfix_operator
	: '[' expression ']'
	| '(' ')'
	| '(' argument_expression_list ')'
	| '.' IDENTIFIER
	| PTR_OP IDENTIFIER
	| INC_OP
	| DEC_OP
	;

argument_expression_list
	: conditional_expression (',' conditional_expression)*
	;

unary_expression
	: postfix_expression
	| INC_OP unary_expression
	| DEC_OP unary_expression
	| unary_operator cast_expression
	| SIZEOF (unary_expression | '(' type_name ')')
	;

unary_operator
	: '&'
	| '*'
	| '+'
	| '-'
	| '~'
	| '!'
	;

assignment_expression
	: unary_expression (assignment_operator assignment_expression)?
	;

assignment_operator
	: '='
	| MUL_ASSIGN
	| DIV_ASSIGN
	| MOD_ASSIGN
	| ADD_ASSIGN
	| SUB_ASSIGN
	| LEFT_ASSIGN
	| RIGHT_ASSIGN
	| AND_ASSIGN
	| XOR_ASSIGN
	| OR_ASSIGN
	;

cast_expression
	: assignment_expression
	| '(' type_name ')' cast_expression
	;

multiplicative_expression
	: cast_expression (multiplicative_operator cast_expression)*
	;

multiplicative_operator
	: '*'
	| '/'
	| '%'
	;

additive_expression
	: multiplicative_expression (additive_operator multiplicative_expression)*
	;

additive_operator
	: '+'
	| '-'
	;

shift_expression
	: additive_expression (shift_operator additive_expression)*

	;

shift_operator
	: LEFT_OP
	| RIGHT_OP
	;

relational_expression
	: shift_expression (relational_operator shift_expression)*
	;

relational_operator
	: '<'
	| '>'
	| LE_OP
	| GE_OP
	;

equality_expression
	: relational_expression (equality_operator relational_expression)*
	;

equality_operator
	: EQ_OP
	| NE_OP
	;

and_expression
	: equality_expression ('&' equality_expression)*
	;

exclusive_or_expression
	: and_expression ('^' and_expression)*
	;

inclusive_or_expression
	: exclusive_or_expression ('|' exclusive_or_expression)*
	;

logical_and_expression
	: inclusive_or_expression (AND_OP inclusive_or_expression)*
	;

logical_or_expression
	: logical_and_expression (OR_OP logical_and_expression)*
	;

conditional_expression
	: logical_or_expression ('?' expression ':' conditional_expression)?
	;

expression
	: conditional_expression (',' conditional_expression)*
	;

constant_expression
	: conditional_expression
	;

declaration
	: declaration_specifiers init_declarator_list? ';'
	;

declaration_specifiers
	: storage_class_specifier declaration_specifiers?
	| type_specifier declaration_specifiers?
	| type_qualifier declaration_specifiers?
	;

init_declarator_list
	: init_declarator (',' init_declarator)*
	;

init_declarator
	: declarator ('=' initializer)?
	;

storage_class_specifier
	: TYPEDEF
	| EXTERN
	| STATIC
	| AUTO
	| REGISTER
	;

type_specifier
	: VOID
	| CHAR
	| SHORT
	| INT
	| LONG
	| FLOAT
	| DOUBLE
	| SIGNED
	| UNSIGNED
	| struct_or_union_specifier
	| enum_specifier
	| TYPE_NAME
	;

struct_or_union_specifier
	: struct_or_union IDENTIFIER ('{' struct_declaration_list '}')?
	| struct_or_union '{' struct_declaration_list '}'
	;

struct_or_union
	: STRUCT
	| UNION
	;

struct_declaration_list
	: struct_declaration+
	;

struct_declaration
	: specifier_qualifier_list struct_declarator_list ';'
	;

specifier_qualifier_list
	: type_specifier specifier_qualifier_list?
	| type_qualifier specifier_qualifier_list?
	;

struct_declarator_list
	: struct_declarator (',' struct_declarator)*
	;

struct_declarator
	: declarator (':' constant_expression)?
	| ':' constant_expression
	;

enum_specifier
	: ENUM '{' enumerator_list '}'
	| ENUM IDENTIFIER ('{' enumerator_list '}')?
	;

enumerator_list
	: enumerator (',' enumerator)*
	;

enumerator
	: IDENTIFIER ('=' constant_expression)?
	;

type_qualifier
	: CONST
	| VOLATILE
	;

declarator
	: pointer direct_declarator
	| direct_declarator
	;

direct_declarator
	: IDENTIFIER direct_declarator_suffix*
	| '(' declarator ')' direct_declarator_suffix*
	;

direct_declarator_suffix
	: '[' constant_expression ']'
	| '[' ']'
	| '(' parameter_type_list ')'
	| '(' identifier_list ')'
	| '(' ')'
	;

pointer
	: '*' pointer_suffix?
	;

pointer_suffix
	: type_qualifier_list pointer?
	| pointer
	;

type_qualifier_list
	: type_qualifier+
	;

parameter_type_list
	: parameter_list (',' ELLIPSIS)?
	;

parameter_list
	: parameter_declaration (',' parameter_declaration)*
	;

// removed declarator option (modified abstract_declarator to allow IDENTIFIER instead)

parameter_declaration
	: declaration_specifiers abstract_declarator
	;

identifier_list
	: IDENTIFIER (',' IDENTIFIER)*
	;

type_name
	: specifier_qualifier_list abstract_declarator*
	;

abstract_declarator
	: direct_abstract_declarator
	| pointer direct_abstract_declarator?
	;

direct_abstract_declarator
	: IDENTIFIER direct_abstract_declarator_suffix*
	| '(' abstract_declarator ')' direct_abstract_declarator_suffix*
	| direct_abstract_declarator_suffix+
	;

direct_abstract_declarator_suffix
	: '[' constant_expression ']'
	| '[' ']'
	| '(' parameter_type_list ')'
	| '(' ')'
	;

initializer
	: conditional_expression
	| '{' initializer_list ','? '}'
	;

initializer_list
	: initializer (',' initializer)*
	;

statement
	: labeled_statement
	| compound_statement
	| expression_statement
	| selection_statement
	| iteration_statement
	| jump_statement
	;

labeled_statement
	: IDENTIFIER ':' statement
	| CASE constant_expression ':' statement
	| DEFAULT ':' statement
	;

compound_statement
	: '{' '}'
	| '{' statement_list '}'
	| '{' declaration_list statement_list? '}'
	;

declaration_list
	: declaration+
	;

statement_list
	: statement+
	;

expression_statement
	: ';'
	| expression ';'
	;

selection_statement
	: IF '(' expression ')' statement (ELSE statement)?
	| SWITCH '(' expression ')' statement
	;

iteration_statement
	: WHILE '(' expression ')' statement
	| DO statement WHILE '(' expression ')' ';'
	| FOR '(' expression_statement expression_statement expression? ')' statement
	;

jump_statement
	: GOTO IDENTIFIER ';'
	| CONTINUE ';'
	| BREAK ';'
	| RETURN expression? ';'
	;

start
translation_unit
	: external_declaration+
	;

// i had to re-write external_declaration as to resolve the declaration-vs-function_definition
// conflict. i feel a better approach would be to use a sort of declaration_terminator and move
// function body over there -- but it would require a deeper refactoring of this grammar

external_declaration
	: declaration_specifiers declarator external_declarator_suffix
	| declarator declaration_list? compound_statement
	;

external_declarator_suffix
	: ('=' initializer)? (',' init_declarator)* ';'
	| declaration_list? compound_statement
	;

//..............................................................................
